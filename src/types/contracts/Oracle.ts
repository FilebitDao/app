/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";
import type BN from "bn.js";
import type { EventEmitter } from "events";
import type { EventLog } from "web3-core";
import type { ContractOptions } from "web3-eth-contract";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type FeedSet = ContractEventLog<{
  feed: string;
  symbol: string;
  0: string;
  1: string;
}>;
export type MaxStalePeriodUpdated = ContractEventLog<{
  oldMaxStalePeriod: string;
  newMaxStalePeriod: string;
  0: string;
  1: string;
}>;
export type NewAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type PricePosted = ContractEventLog<{
  asset: string;
  previousPriceMantissa: string;
  requestedPriceMantissa: string;
  newPriceMantissa: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Oracle extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Oracle;
  clone(): Oracle;
  methods: {
    NAI_VALUE(): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    assetPrices(asset: string): NonPayableTransactionObject<string>;

    getFeed(symbol: string): NonPayableTransactionObject<string>;

    getUnderlyingPrice(nToken: string): NonPayableTransactionObject<string>;

    isPriceOracle(): NonPayableTransactionObject<boolean>;

    maxStalePeriod(): NonPayableTransactionObject<string>;

    setAdmin(newAdmin: string): NonPayableTransactionObject<void>;

    setDirectPrice(
      asset: string,
      price: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeed(symbol: string, feed: string): NonPayableTransactionObject<void>;

    setMaxStalePeriod(
      newMaxStalePeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    setUnderlyingPrice(
      nToken: string,
      underlyingPriceMantissa: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    FeedSet(cb?: Callback<FeedSet>): EventEmitter;
    FeedSet(options?: EventOptions, cb?: Callback<FeedSet>): EventEmitter;

    MaxStalePeriodUpdated(cb?: Callback<MaxStalePeriodUpdated>): EventEmitter;
    MaxStalePeriodUpdated(
      options?: EventOptions,
      cb?: Callback<MaxStalePeriodUpdated>
    ): EventEmitter;

    NewAdmin(cb?: Callback<NewAdmin>): EventEmitter;
    NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter;

    PricePosted(cb?: Callback<PricePosted>): EventEmitter;
    PricePosted(
      options?: EventOptions,
      cb?: Callback<PricePosted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "FeedSet", cb: Callback<FeedSet>): void;
  once(event: "FeedSet", options: EventOptions, cb: Callback<FeedSet>): void;

  once(
    event: "MaxStalePeriodUpdated",
    cb: Callback<MaxStalePeriodUpdated>
  ): void;
  once(
    event: "MaxStalePeriodUpdated",
    options: EventOptions,
    cb: Callback<MaxStalePeriodUpdated>
  ): void;

  once(event: "NewAdmin", cb: Callback<NewAdmin>): void;
  once(event: "NewAdmin", options: EventOptions, cb: Callback<NewAdmin>): void;

  once(event: "PricePosted", cb: Callback<PricePosted>): void;
  once(
    event: "PricePosted",
    options: EventOptions,
    cb: Callback<PricePosted>
  ): void;
}
