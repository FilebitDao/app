/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";
import type BN from "bn.js";
import type { EventEmitter } from "events";
import type { EventLog } from "web3-core";
import type { ContractOptions } from "web3-eth-contract";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminTransfered = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface NaiVault extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): NaiVault;
  clone(): NaiVault;
  methods: {
    _become(naiVaultProxy: string): NonPayableTransactionObject<void>;

    accNWLPerShare(): NonPayableTransactionObject<string>;

    admin(): NonPayableTransactionObject<string>;

    burnAdmin(): NonPayableTransactionObject<void>;

    claim(): NonPayableTransactionObject<void>;

    deposit(_amount: number | string | BN): NonPayableTransactionObject<void>;

    getAdmin(): NonPayableTransactionObject<string>;

    nai(): NonPayableTransactionObject<string>;

    naiVaultImplementation(): NonPayableTransactionObject<string>;

    nwl(): NonPayableTransactionObject<string>;

    nwlBalance(): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingNAIVaultImplementation(): NonPayableTransactionObject<string>;

    pendingNWL(_user: string): NonPayableTransactionObject<string>;

    pendingRewards(): NonPayableTransactionObject<string>;

    setNarwhalInfo(
      _nwl: string,
      _nai: string
    ): NonPayableTransactionObject<void>;

    setNewAdmin(newAdmin: string): NonPayableTransactionObject<void>;

    updatePendingRewards(): NonPayableTransactionObject<void>;

    userInfo(arg0: string): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    withdraw(_amount: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    AdminTransfered(cb?: Callback<AdminTransfered>): EventEmitter;
    AdminTransfered(
      options?: EventOptions,
      cb?: Callback<AdminTransfered>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminTransfered", cb: Callback<AdminTransfered>): void;
  once(
    event: "AdminTransfered",
    options: EventOptions,
    cb: Callback<AdminTransfered>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
