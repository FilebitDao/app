/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";
import type BN from "bn.js";
import type { EventEmitter } from "events";
import type { EventLog } from "web3-core";
import type { ContractOptions } from "web3-eth-contract";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminTransferred = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type DelegateChangedV2 = ContractEventLog<{
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
  0: string;
  1: string;
  2: string;
}>;
export type DelegateVotesChangedV2 = ContractEventLog<{
  delegate: string;
  previousBalance: string;
  newBalance: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  rewardToken: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ExecutedWithdrawal = ContractEventLog<{
  user: string;
  rewardToken: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type PoolAdded = ContractEventLog<{
  rewardToken: string;
  pid: string;
  token: string;
  allocPoints: string;
  rewardPerBlock: string;
  lockPeriod: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type PoolUpdated = ContractEventLog<{
  rewardToken: string;
  pid: string;
  oldAllocPoints: string;
  newAllocPoints: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ReqestedWithdrawal = ContractEventLog<{
  user: string;
  rewardToken: string;
  pid: string;
  amount: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RewardAmountUpdated = ContractEventLog<{
  rewardToken: string;
  oldReward: string;
  newReward: string;
  0: string;
  1: string;
  2: string;
}>;
export type StoreUpdated = ContractEventLog<{
  oldNwl: string;
  oldStore: string;
  newNwl: string;
  newStore: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type WithdrawalLockingPeriodUpdated = ContractEventLog<{
  rewardToken: string;
  pid: string;
  oldPeriod: string;
  newPeriod: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface Vault extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Vault;
  clone(): Vault;
  methods: {
    DELEGATION_TYPEHASH(): NonPayableTransactionObject<string>;

    DOMAIN_TYPEHASH(): NonPayableTransactionObject<string>;

    _become(nwlVaultProxy: string): NonPayableTransactionObject<void>;

    add(
      _rewardToken: string,
      _allocPoint: number | string | BN,
      _token: string,
      _rewardPerBlock: number | string | BN,
      _lockPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    admin(): NonPayableTransactionObject<string>;

    burnAdmin(): NonPayableTransactionObject<void>;

    checkpoints(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      fromBlock: string;
      votes: string;
      0: string;
      1: string;
    }>;

    delegate(delegatee: string): NonPayableTransactionObject<void>;

    delegateBySig(
      delegatee: string,
      nonce: number | string | BN,
      expiry: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    delegates(arg0: string): NonPayableTransactionObject<string>;

    deposit(
      _rewardToken: string,
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    executeWithdrawal(
      _rewardToken: string,
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;

    getAdmin(): NonPayableTransactionObject<string>;

    getCurrentVotes(account: string): NonPayableTransactionObject<string>;

    getEligibleWithdrawalAmount(
      _rewardToken: string,
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    getPriorVotes(
      account: string,
      blockNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRequestedAmount(
      _rewardToken: string,
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    getUserInfo(
      _rewardToken: string,
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<{
      amount: string;
      rewardDebt: string;
      pendingWithdrawals: string;
      0: string;
      1: string;
      2: string;
    }>;

    getWithdrawalRequests(
      _rewardToken: string,
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<[string, string][]>;

    implementation(): NonPayableTransactionObject<string>;

    massUpdatePools(_rewardToken: string): NonPayableTransactionObject<void>;

    nonces(arg0: string): NonPayableTransactionObject<string>;

    numCheckpoints(arg0: string): NonPayableTransactionObject<string>;

    nwlAddress(): NonPayableTransactionObject<string>;

    nwlStore(): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    pendingNWLVaultImplementation(): NonPayableTransactionObject<string>;

    pendingReward(
      _rewardToken: string,
      _pid: number | string | BN,
      _user: string
    ): NonPayableTransactionObject<string>;

    poolInfos(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      token: string;
      allocPoint: string;
      lastRewardBlock: string;
      accRewardPerShare: string;
      lockPeriod: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    poolLength(rewardToken: string): NonPayableTransactionObject<string>;

    requestWithdrawal(
      _rewardToken: string,
      _pid: number | string | BN,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    rewardTokenAmountsPerBlock(
      arg0: string
    ): NonPayableTransactionObject<string>;

    set(
      _rewardToken: string,
      _pid: number | string | BN,
      _allocPoint: number | string | BN
    ): NonPayableTransactionObject<void>;

    setNwlStore(
      _nwl: string,
      _nwlStore: string
    ): NonPayableTransactionObject<void>;

    setRewardAmountPerBlock(
      _rewardToken: string,
      _rewardAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setWithdrawalLockingPeriod(
      _rewardToken: string,
      _pid: number | string | BN,
      _newPeriod: number | string | BN
    ): NonPayableTransactionObject<void>;

    totalAllocPoints(arg0: string): NonPayableTransactionObject<string>;

    updatePool(
      _rewardToken: string,
      _pid: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AdminTransferred(cb?: Callback<AdminTransferred>): EventEmitter;
    AdminTransferred(
      options?: EventOptions,
      cb?: Callback<AdminTransferred>
    ): EventEmitter;

    DelegateChangedV2(cb?: Callback<DelegateChangedV2>): EventEmitter;
    DelegateChangedV2(
      options?: EventOptions,
      cb?: Callback<DelegateChangedV2>
    ): EventEmitter;

    DelegateVotesChangedV2(cb?: Callback<DelegateVotesChangedV2>): EventEmitter;
    DelegateVotesChangedV2(
      options?: EventOptions,
      cb?: Callback<DelegateVotesChangedV2>
    ): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    ExecutedWithdrawal(cb?: Callback<ExecutedWithdrawal>): EventEmitter;
    ExecutedWithdrawal(
      options?: EventOptions,
      cb?: Callback<ExecutedWithdrawal>
    ): EventEmitter;

    PoolAdded(cb?: Callback<PoolAdded>): EventEmitter;
    PoolAdded(options?: EventOptions, cb?: Callback<PoolAdded>): EventEmitter;

    PoolUpdated(cb?: Callback<PoolUpdated>): EventEmitter;
    PoolUpdated(
      options?: EventOptions,
      cb?: Callback<PoolUpdated>
    ): EventEmitter;

    ReqestedWithdrawal(cb?: Callback<ReqestedWithdrawal>): EventEmitter;
    ReqestedWithdrawal(
      options?: EventOptions,
      cb?: Callback<ReqestedWithdrawal>
    ): EventEmitter;

    RewardAmountUpdated(cb?: Callback<RewardAmountUpdated>): EventEmitter;
    RewardAmountUpdated(
      options?: EventOptions,
      cb?: Callback<RewardAmountUpdated>
    ): EventEmitter;

    StoreUpdated(cb?: Callback<StoreUpdated>): EventEmitter;
    StoreUpdated(
      options?: EventOptions,
      cb?: Callback<StoreUpdated>
    ): EventEmitter;

    WithdrawalLockingPeriodUpdated(
      cb?: Callback<WithdrawalLockingPeriodUpdated>
    ): EventEmitter;
    WithdrawalLockingPeriodUpdated(
      options?: EventOptions,
      cb?: Callback<WithdrawalLockingPeriodUpdated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminTransferred", cb: Callback<AdminTransferred>): void;
  once(
    event: "AdminTransferred",
    options: EventOptions,
    cb: Callback<AdminTransferred>
  ): void;

  once(event: "DelegateChangedV2", cb: Callback<DelegateChangedV2>): void;
  once(
    event: "DelegateChangedV2",
    options: EventOptions,
    cb: Callback<DelegateChangedV2>
  ): void;

  once(
    event: "DelegateVotesChangedV2",
    cb: Callback<DelegateVotesChangedV2>
  ): void;
  once(
    event: "DelegateVotesChangedV2",
    options: EventOptions,
    cb: Callback<DelegateVotesChangedV2>
  ): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "ExecutedWithdrawal", cb: Callback<ExecutedWithdrawal>): void;
  once(
    event: "ExecutedWithdrawal",
    options: EventOptions,
    cb: Callback<ExecutedWithdrawal>
  ): void;

  once(event: "PoolAdded", cb: Callback<PoolAdded>): void;
  once(
    event: "PoolAdded",
    options: EventOptions,
    cb: Callback<PoolAdded>
  ): void;

  once(event: "PoolUpdated", cb: Callback<PoolUpdated>): void;
  once(
    event: "PoolUpdated",
    options: EventOptions,
    cb: Callback<PoolUpdated>
  ): void;

  once(event: "ReqestedWithdrawal", cb: Callback<ReqestedWithdrawal>): void;
  once(
    event: "ReqestedWithdrawal",
    options: EventOptions,
    cb: Callback<ReqestedWithdrawal>
  ): void;

  once(event: "RewardAmountUpdated", cb: Callback<RewardAmountUpdated>): void;
  once(
    event: "RewardAmountUpdated",
    options: EventOptions,
    cb: Callback<RewardAmountUpdated>
  ): void;

  once(event: "StoreUpdated", cb: Callback<StoreUpdated>): void;
  once(
    event: "StoreUpdated",
    options: EventOptions,
    cb: Callback<StoreUpdated>
  ): void;

  once(
    event: "WithdrawalLockingPeriodUpdated",
    cb: Callback<WithdrawalLockingPeriodUpdated>
  ): void;
  once(
    event: "WithdrawalLockingPeriodUpdated",
    options: EventOptions,
    cb: Callback<WithdrawalLockingPeriodUpdated>
  ): void;
}
